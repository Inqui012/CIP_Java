// 헝가리안 식으로 변수를 지정해놓을 수 있다.
$red: #fa5252;
$orange: #fd7e14;
$yellow: #fcc419;
$green: #40c057;
$blue: #339af0;
$indigo: #5c7cfa;
$violet: #7950f2;

// mixin = js의 함수처럼 기본 틀을 만들어놓고 변수를 넣어줘서 값을 다르게 할 수 있다.
// 사용하고싶은 곳에서 @include 함수명(매개변수) 로 주면 적용된다.
// @for $i from 1 through 4 = for문처럼도 사용할 수 있네
@mixin square($size) {
   $calculated: 32px * $size;
   width: $calculated;
   height: $calculated;
}

// .SassComponent {
//    display: flex;
//    // nest 가능. HTML 구성처럼 괄호안의 들여쓰기로 깊이를 바로 알 수 있다.
//    // 아래는 .SassCompnent 클래스 하위의 .nestClass 를 지정.
//    .nestClass {
//       color: $blue;
//    }
//    // &으로 부모클래스를 잡을수도 있음.
//    // 아래는 .SassCompnent::before 를 지정.
//    &::before {
//       color: #339af0;
//    }
// }

.SassComponent {
   display: flex;
   .box {
      background: red;
      cursor: pointer;
      transition: all 0.3s ease-in;
      &.red {
         background: $red;
         @include square(1);
      }
      &.orange {
         background: $orange;
         @include square(2);
      }
      &.yellow {
         background: $yellow;
         @include square(3);
      }
      &.green {
         background: $green;
         @include square(4);
      }
      &.blue {
         background: $blue;
         @include square(5);
      }
      &.indigo {
         background: $indigo;
         @include square(6);
      }
      &.violet {
         background: $violet;
         @include square(7);
      }
      &:hover {
         background: black;
      }
   }
}
