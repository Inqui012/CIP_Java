CREATE TABLE ACADEMY_A (
    STUDENT_NO NUMBER PRIMARY KEY,
    STUDENT_NAME VARCHAR2(20) NOT NULL
);
INSERT INTO ACADEMY_A VALUES (1001, '정소화');
INSERT INTO ACADEMY_A VALUES (1002, '김용욱');
INSERT INTO ACADEMY_A VALUES (1003, '고명석');
INSERT INTO ACADEMY_A VALUES (1004, '김연아');

CREATE TABLE ACADEMY_B (
    STUDENT_NO NUMBER PRIMARY KEY,
    STUDENT_NAME VARCHAR2(20) NOT NULL
);
INSERT INTO ACADEMY_B VALUES (1003, '고명석');
INSERT INTO ACADEMY_B VALUES (1004, '김연아');
INSERT INTO ACADEMY_B VALUES (1005, '김태환');
INSERT INTO ACADEMY_B VALUES (1006, '이윤아');

CREATE TABLE ACADEMY_C (
    STUDENT_NO NUMBER PRIMARY KEY,
    STUDENT_NAME VARCHAR2(20) NOT NULL
);
INSERT INTO ACADEMY_C VALUES (1004, '김연아');
INSERT INTO ACADEMY_C VALUES (1006, '이윤아');
INSERT INTO ACADEMY_C VALUES (1001, '정소화');
INSERT INTO ACADEMY_C VALUES (1007, '정소화');

CREATE TABLE ACADEMY_D (
    STUDENT_NO NUMBER PRIMARY KEY
);
INSERT INTO ACADEMY_D VALUES (1004);
INSERT INTO ACADEMY_D VALUES (1006);
INSERT INTO ACADEMY_D VALUES (1001);
INSERT INTO ACADEMY_D VALUES (1007);

-- UNION 문. 테이블 구조가 일치할경우, 하나의 테이블로 병함해서 출력한다.
-- 두 테이블의 구조(컬럼 갯수)가 다를경우 오류. 갯수가 같아도 일치하는 열이름이 없을 경우 에러.
-- 테이블의 구조는 FROM으로 참조하는 테이블의 전체모양이 아니라 SELECT 로 불러오는 테이블의 모양을 비교함.
-- 기본모양이 달라도 같은 열이름을 가진 컬럼을 직접 지정하여 UNION 문을 사용하면 실행가능하다.

-- SELECT * FROM 테이블A UNION ALL SELECT * FROM 테이블B;
-- 두 테이블을 병합하여 하나의 테이블로 표현하는데 그저 단순하게 두 테이블이 가지고 있는 데이터를 하나로 연결해서 보여줄 뿐임.
-- SELECT * FROM 테이블A UNION SELECT * FROM 테이블B;
-- 위와 같지만 두 테이블 사이에 일치하는 값이 있다면 이를 중복시키지 않고 한쪽만 표시한다. 중복을 표시하지 않는 리스트?
SELECT * FROM ACADEMY_A UNION ALL SELECT * FROM ACADEMY_B;
SELECT STUDENT_NO FROM ACADEMY_A UNION ALL SELECT * FROM ACADEMY_D;
SELECT STUDENT_NO FROM ACADEMY_A UNION SELECT * FROM ACADEMY_D;

-- SELECT * FROM 테이블A INTERSECT SELECT * FROM 테이블B;
-- 두 테이블 사이에 일치하는 부분의 값만 을 나열해서 표시한다. 
SELECT STUDENT_NO FROM ACADEMY_A INTERSECT SELECT * FROM ACADEMY_D;

-- SELECT * FROM 테이블A MUNUS SELECT * FROM 테이블B;
-- 위와 반대. 일치하는 값을 제거한, A 와 B 가 각각 가지고 있는 유일한 값들만 표시한다.
SELECT STUDENT_NO FROM ACADEMY_A MINUS SELECT * FROM ACADEMY_D;

-- 이것도 다중으로 연결되네. 아까 조인보다는 한결 머릿속에서 상상하기 편한듯.
SELECT STUDENT_NO FROM ACADEMY_A MINUS SELECT * FROM ACADEMY_D INTERSECT SELECT STUDENT_NO FROM ACADEMY_B;
SELECT STUDENT_NO FROM ACADEMY_A UNION ALL SELECT * FROM ACADEMY_D INTERSECT SELECT STUDENT_NO FROM ACADEMY_B;

